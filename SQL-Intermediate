SELECT 
  COUNT(*)
FROM 
  tutorial.aapl_historical_stock_price

SELECT 
  SUM(volume)
FROM 
  tutorial.aapl_historical_stock_price
  
SELECT
  MIN(volume) AS min_volume,
  MAX(volume) AS max_volume
FROM tutorial.aapl_historical_stock_price
  
SELECT 
  AVG(high)
FROM 
  tutorial.aapl_historical_stock_price
  
  SELECT 
  COUNT(*)
FROM 
  tutorial.aapl_historical_stock_price
/* different from select * as it gives number of rows and not actual rows */

SELECT 
  COUNT(high)
FROM 
  tutorial.aapl_historical_stock_price
/*excludes any values that are null in the high coloumn*/  
  
SELECT 
  COUNT(low)
FROM 
  tutorial.aapl_historical_stock_price
  
SELECT 
  COUNT(date)
FROM 
  tutorial.aapl_historical_stock_price
  
SELECT 
  COUNT(date) AS count_of_date
FROM 
  tutorial.aapl_historical_stock_price
  
SELECT 
  COUNT(date) AS "Count Of Date"
FROM 
  tutorial.aapl_historical_stock_price
/*put in "" if you want to leave space between words*/

SELECT 
  COUNT(year) AS year,
  COUNT(month) AS month,
  COUNT(open) AS open,
  COUNT(high) AS high,
  COUNT(low) AS low,
  COUNT(close) AS close,
  COUNT(volume) AS volume
FROM 
  tutorial.aapl_historical_stock_price
  
  SELECT 
  SUM(volume)
FROM 
  tutorial.aapl_historical_stock_price
/* only works on columns with integers */

SELECT 
  SUM(open)/COUNT(open) AS avg_open_price
FROM 
  tutorial.aapl_historical_stock_price

SELECT 
  MIN(volume) AS min_volume,
  MAX(volume) AS max_volume
FROM 
  tutorial.aapl_historical_stock_price

SELECT 
  *
FROM 
  tutorial.aapl_historical_stock_price
  
SELECT 
  MIN(low) AS Lowest_StockPrice
FROM 
  tutorial.aapl_historical_stock_price
  
SELECT 
  MAX(close - open) AS StockPrice_Increas
FROM 
  tutorial.aapl_historical_stock_price
  
  SELECT 
  AVG(high)
FROM 
  tutorial.aapl_historical_stock_price
  WHERE 
    high IS NOT NULL
    
SELECT 
  AVG(volume) 
FROM 
  tutorial.aapl_historical_stock_price
  
  SELECT 
  year
  COUNT(*) AS count
FROM 
  tutorial.aapl_historical_stock_price
GROUP BY 
  year
  
SELECT 
  year,
  month,
  COUNT(*) AS count
FROM 
  tutorial.aapl_historical_stock_price
GROUP BY 
  year,
  month
  
SELECT 
  year,
  month,  
  SUM(volume) AS Shares_traded
FROM 
  tutorial.aapl_historical_stock_price
GROUP BY 
  year,
  month
ORDER BY
  year,
  month
/* Make sure to include year and month otherwise you will not get all years and it will just sum up the months from each year */

SELECT 
  year,
  month,
  COUNT(*) AS count
FROM 
  tutorial.aapl_historical_stock_price
GROUP BY 
  1, 2
/* Works in mode but may not work in other SQL system*/

SELECT
  year,
  AVG(close - open) AS avg_change
FROM 
  tutorial.aapl_historical_stock_price
GROUP BY 
  1
ORDER BY 
  1

SELECT 
  year,
  month,
  MIN(low) AS lowest_stock,
  MAX(high) AS highest_stock
FROM 
  tutorial.aapl_historical_stock_price
GROUP BY 
  1, 2
ORDER BY 
  1, 2
  
  SELECT 
  year,
  month,
  MAX(high) AS month_high
FROM 
  tutorial.aapl_historical_stock_price
GROUP BY 
  year, month
HAVING 
  MAX(high) > 400
ORDER BY 
  year, 
  month
  
  SELECT
  player_name,
  year,
CASE WHEN 
  year = 'SR' THEN 'yes'
ELSE 
  NULL END AS is_a_senior
FROM 
  benn.college_football_players
/* basically an if statement */

SELECT 
  player_name,
  year,
CASE WHEN 
  year = 'SR' THEN 'yes'
ELSE 
  'no' END AS is_a_senior
FROM benn.college_football_players

SELECT 
  player_name,
  weight,
CASE 
  WHEN weight > 250 THEN 'over 250'
  WHEN weight > 200 AND weight <= 250 THEN '201-250'
  WHEN weight > 175 AND weight <= 200 THEN '176-200'
ELSE
  '175 or under' END AS weight_group
FROM 
  benn.college_football_players

SELECT DISTINCT 
  year, 
  month
FROM 
  tutorial.aapl_historical_stock_price
  
SELECT DISTINCT 
  year
FROM 
  tutorial.aapl_historical_stock_price
ORDER BY 
  year
  
/* Show specific value colums */

SELECT 
  teams.conference AS conference,
  AVG(players.weight) AS average_weight
FROM 
  benn.college_football_players players
JOIN 
  benn.college_football_teams teams
ON 
  teams.school_name = players.school_name
GROUP BY 
  teams.conference
ORDER BY 
  AVG(players.weight) DESC
 
/* Puts different tables together

SELECT players.*,
       teams.*
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
    
/* Joins based on what is common in two tables */

SELECT players.school_name AS players_school_name,
       teams.school_name AS teams_school_name
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
    
SELECT 
  companies.permalink AS companies_permalink,
  companies.name AS companies_name,
  acquisitions.company_permalink AS acquisitions_permalink,
  acquisitions.acquired_at AS acquired_date
FROM 
  tutorial.crunchbase_companies companies
JOIN 
  tutorial.crunchbase_acquisitions acquisitions
ON 
  companies.permalink = acquisitions.company_permalink

/* Joins all from left table and the common ones from right table */


SELECT 
  companies.permalink AS companies_permalink,
  companies.name AS companies_name,
  acquisitions.company_permalink AS acquisitions_permalink,
  acquisitions.acquired_at AS acquired_date
FROM 
  tutorial.crunchbase_acquisitions acquisitions
RIGHT JOIN 
  tutorial.crunchbase_companies companies
ON companies.permalink = acquisitions.company_permalink

/* Joins all from right table and the common ones from left table */


SELECT 
  companies.permalink AS companies_permalink,
  companies.name AS companies_name,
  acquisitions.company_permalink AS acquisitions_permalink,
  acquisitions.acquired_at AS acquired_date
FROM 
  tutorial.crunchbase_companies companies
LEFT JOIN 
  tutorial.crunchbase_acquisitions acquisitions
ON 
  companies.permalink = acquisitions.company_permalink
WHERE 
  acquisitions.company_permalink != '/company/1000memories'
OR 
  acquisitions.company_permalink IS NULL
ORDER BY 1
 
SELECT 
  CASE WHEN investments.investor_name IS NULL THEN 'No Investors'
ELSE 
  investments.investor_name END AS investor,
  COUNT(DISTINCT companies.permalink) AS companies_invested_in
FROM 
  tutorial.crunchbase_companies companies
LEFT JOIN 
  tutorial.crunchbase_investments investments
ON 
  companies.permalink = investments.company_permalink
GROUP BY 1
ORDER BY 2 DESC

SELECT 
  COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NULL
THEN 
  companies.permalink ELSE NULL END) AS companies_only,
  COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NOT NULL
THEN 
  companies.permalink ELSE NULL END) AS both_tables,
  COUNT(CASE WHEN companies.permalink IS NULL AND investments.company_permalink IS NOT NULL
THEN 
  investments.company_permalink ELSE NULL END) AS investments_only
FROM 
  tutorial.crunchbase_companies companies
  FULL JOIN tutorial.crunchbase_investments_part1 investments
ON companies.permalink = investments.company_permalink

/* combines all coloums from both tables being used*/


SELECT 
  *
FROM 
  tutorial.crunchbase_investments_part1
UNION 
  ALL
SELECT 
  *
FROM 
  tutorial.crunchbase_investments_part2

/* combines two tables, leaving out any repiitions */

SELECT 
  'investments_part1' AS dataset_name,
  companies.status,
  COUNT(DISTINCT investments.investor_permalink) AS investors
FROM 
  tutorial.crunchbase_companies companies
LEFT JOIN 
  tutorial.crunchbase_investments_part1 investments
ON 
  companies.permalink = investments.company_permalink
GROUP BY 1,2
UNION ALL
SELECT
  'investments_part2' AS dataset_name,
  companies.status,
  COUNT(DISTINCT investments.investor_permalink) AS investors
FROM 
  tutorial.crunchbase_companies companies
LEFT JOIN 
  tutorial.crunchbase_investments_part2 investments
ON 
  companies.permalink = investments.company_permalink
GROUP BY 
  1,2


SELECT 
  companies.permalink,
  companies.name,
  companies.status,
  COUNT(investments.investor_permalink) AS investors
FROM 
  tutorial.crunchbase_companies companies
LEFT JOIN 
  tutorial.crunchbase_investments_part1 investments
ON 
  companies.permalink = investments.company_permalink
WHERE 
  investments.funded_year > companies.founded_year + 5
GROUP BY 1,2, 3

SELECT 
  companies.permalink,
  companies.name,
  investments.company_name,
  investments.company_permalink
FROM 
  tutorial.crunchbase_companies companies
LEFT JOIN 
  tutorial.crunchbase_investments_part1 investments
ON 
  companies.permalink = investments.company_permalink
AND 
  companies.name = investments.company_name
  
  SELECT DISTINCT 
  japan_investments.company_name,
  japan_investments.company_permalink
FROM 
  tutorial.crunchbase_investments_part1 japan_investments
JOIN 
  tutorial.crunchbase_investments_part1 gb_investments
ON 
  japan_investments.company_name = gb_investments.company_name
AND 
  gb_investments.investor_country_code = 'GBR'
AND 
  gb_investments.funded_at > japan_investments.funded_at
WHERE 
  japan_investments.investor_country_code = 'JPN'
ORDER BY 1




